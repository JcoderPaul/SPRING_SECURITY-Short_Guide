plugins {
    id 'java'
    id 'war'
    id "io.freefair.lombok" version "8.3"
    id "com.github.ben-manes.versions" version "0.51.0"
}

apply from: 'version.gradle'
apply plugin: 'war'

war {
    enabled=true
}

group 'me.oldboy'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    /* Основные зависимости Spring */
    implementation "org.springframework:spring-context:${versions.spring}"
    implementation "org.springframework:spring-webmvc:${versions.spring}"
    implementation "org.springframework:spring-beans:${versions.spring}"

    /* Зависимость позволяющая использовать функционал Spring Security */
    implementation "org.springframework.security:spring-security-web:${versions.security}"
    implementation "org.springframework.security:spring-security-config:${versions.security}"
    implementation "org.springframework.security:spring-security-taglibs:${versions.security}"
    implementation "org.springframework.security:spring-security-core:${versions.security}"

    /* Зависимость позволяющая использовать функционал OAuth2 для сервиса ресурсов */
    implementation "org.springframework.security:spring-security-oauth2-resource-server:${versions.security}"
    implementation "org.springframework.security:spring-security-oauth2-jose:${versions.security}"

    /*
        Как вариант мы можем использовать имплементацию boot библиотеки вместо вместо двух верхних:
        implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server:${versions.oauth2_rs}"
    */

    /* Зависимость позволяющая использовать функционал Spring JPA */
    implementation "org.springframework.data:spring-data-jpa:${versions.data_jpa}"

    /* Зависимость позволяющая использовать функционал JDBC Template */
    implementation "org.springframework:spring-jdbc:${versions.spring}"

    /* Подключаем функционал Hibernate и провайдера валидации */
    implementation "org.hibernate:hibernate-core:${versions.hibernate}"
    implementation "org.hibernate:hibernate-validator:${versions.validator}"

    /* Зависимость миграционного фреймворка */
    implementation "org.liquibase:liquibase-core:${versions.liquibase}"

    /* Зависимость PostgreSQL */
    implementation "org.postgresql:postgresql:${versions.postgres}"

    /* Зависимость позволяющая в контроллерах принимать JSON запросы */
    implementation "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${versions.jackson}"

    /* Зависимость позволяющая читать YAML файлы, у нас ведь nonBoot приложение и такое удовольствие нам не доступно из коробки, вроде как */
    implementation "org.yaml:snakeyaml:${versions.snakeyaml}"

    /* Зависимость отвечающая за работу аннотаций и сервлетов */
    implementation "jakarta.servlet:jakarta.servlet-api:${versions.jakarta_servlet_api}"
    implementation "jakarta.validation:jakarta.validation-api:${versions.jakarta_validation}"

    /* Зависимость отвечающая за работу шаблонов отображения */
    implementation "org.thymeleaf:thymeleaf-spring6:${versions.thymeleaf}"
    implementation "org.thymeleaf.extras:thymeleaf-extras-springsecurity6:${versions.thymeleaf}"

    /* Подключим функционал позволяющий нам работать с JWT */
    implementation "io.jsonwebtoken:jjwt-api:${versions.jjwt}"
    implementation "io.jsonwebtoken:jjwt-root:${versions.jjwt}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${versions.jjwt}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${versions.jjwt}"

    /* Подключим библиотеку Mapstruct */
    implementation "org.projectlombok:lombok-mapstruct-binding:${versions.lombok_map_struct}"
    implementation "org.mapstruct:mapstruct:${versions.mapstruct}"
    implementation "org.mapstruct:mapstruct-processor:${versions.mapstruct}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${versions.mapstruct}",
            "org.projectlombok:lombok-mapstruct-binding:${versions.lombok_map_struct}"

    /* Подключим log4j провайдер */
    implementation "org.slf4j:slf4j-log4j12:${versions.slf4j_log4j_binding}"

    /* Зависимость закрывает проблему с "замещением" Hibernate Validation в изолированных тестах */
    implementation "org.glassfish:jakarta.el:${versions.glassfish}"

    /* Блок пакетов обслуживающий тесты */
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${versions.jupiter}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${versions.jupiter}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${versions.jupiter}"

    /* Зависимости отвечающие за работу со Spring тестами */
    testImplementation "org.springframework:spring-test:${versions.spring}"
    testImplementation "org.springframework.security:spring-security-test:${versions.security}"

    /* Подключим все для тестов Testcontainers */
    testImplementation "org.testcontainers:postgresql:${versions.testcontainers}"
    testImplementation "org.testcontainers:junit-jupiter:${versions.testcontainers}"

    /* Подключим Mockito и AssertJ */
    testImplementation "org.mockito:mockito-core:${versions.mockito}"
    testRuntimeOnly "org.mockito:mockito-core:${versions.mockito}"
    testImplementation "org.mockito:mockito-junit-jupiter:${versions.mockito}"

    testImplementation "org.assertj:assertj-core:${versions.assertj}"
    testRuntimeOnly "org.assertj:assertj-core:${versions.assertj}"

    testImplementation "org.hamcrest:hamcrest:${versions.hamcrest}"
}

test {
    useJUnitPlatform()
}

wrapper {
    gradleVersion '8.2.1'
}